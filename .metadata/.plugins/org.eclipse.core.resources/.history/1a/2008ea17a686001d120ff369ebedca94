package ch14.bookshop.shopping;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class BuyDBBean {
	private static BuyDBBean instance = new BuyDBBean();
	public static BuyDBBean getInstance() {
		return instance;
	}
	private BuyDBBean() {}
	
	private Connection getConnection() throws Exception{
		Context intiCtx = new InitialContext();
		Context envCtx = (Context) intiCtx.lookup("java:comp/env");
		DataSource ds = (DataSource)envCtx.lookup("jdbc/basicjsp");
		return ds.getConnection();
	}
	
	// bank 테이블에 있는 전체 레코드를 얻어내는 메소드
	public List<String> getAccount(){
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<String> accountList = null;
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement("select * from shop_bank");
			rs = pstmt.executeQuery();
			
			accountList = new ArrayList<String>();
			while(rs.next()) {
				String account = new String(rs.getString("account") + " " + rs.getString("bank") + " " + rs.getString("name"));
				accountList.add(account);
			}
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			if(pstmt != null) 
				try {pstmt.close();}catch(SQLException ex) {}
			if(conn != null) 
				try {conn.close();}catch(SQLException ex) {}
//			if(rs != null) 
//				try {pstmt.close();}catch(SQLException ex) {}
			
		}
		return accountList;
	}
	
	// 구매 테이블인 buy 에 구매 목록 등록
	public void insertBuy(List <CartDataBean> lists, String id, String account, String deliveryName,
	String deliveryTel, String deliveryAddress) throws Exception{
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Timestamp reg_date = null;
		
		String sql = "";
		String maxDate = "";
		String number = "";
		String todayDate = "";
		String compareDate = "";
		long buyId = 0;
		short nowCount;
		try {
			conn = getConnection();
			reg_date = new Timestamp(System.currentTimeMillis());
			todayDate = reg_date.toString();
			compareDate = todayDate.substring(0,4) + todayDate.substring(5,7) + todayDate.substring(8, 10);
			pstmt = conn.prepareStatement("select max(buy_id) from shop_buy");
			
			rs = pstmt.executeQuery();
			
			rs.next();
			if(rs.getLong(1)>0) {
				Long val = new Long(rs.getLong(1));
				maxDate = val.toString().substring(0,8);
				number = val.toString().substring(8);
				if(compareDate.equals(maxDate)) {
					if(Integer.parseInt(number)+1 < 10000) 
						buyId = Long.parseLong(maxDate + (Integer.parseInt(number)+1+10000));
					else
						buyId = Long.parseLong(maxDate + (Integer.parseInt(number)+1));
				}else {
					compareDate += "00001";
					buyId = Long.parseLong(compareDate);
				}
			}else {
				compareDate += "00001";
				buyId = Long.parseLong(compareDate);
			}
			
			// 103 ~ 151 라인까지 하나의 트랜잭션으로 처리
			conn.setAutoCommit(false);
			for(int i=0; i<lists.size();i++) {
				CartDataBean cart = lists.get(i);
				
				sql = "insert into buy (buy_id,buyer,book_id,book_title,buy_price,buy_count,book_image,buy_date,acount,";
				sql += "deliveryName,deliveryTel,deliveryAddress)";
				sql += " values (?,?,?,?,?,?,?,?,?,?,?,?)";
				pstmt = conn.prepareStatement(sql);
				
				pstmt.setLong(1, buyId);
				pstmt.setString(2, id);
				pstmt.setInt(3, cart.getBook_id());
				pstmt.setString(4, cart.getBook_title());
				pstmt.setInt(5, cart.getBuy_price());
				pstmt.setByte(6, cart.getBuy_count());
				pstmt.setString(7, cart.getBook_image());
				pstmt.setTimestamp(8, reg_date);
				pstmt.setString(9, account);
				pstmt.setString(10, deliveryName);
				pstmt.setString(11, deliveryTel);
				pstmt.setString(12, deliveryAddress);
				pstmt.executeUpdate();
				
				// 상품이 구매되었으므로 book 테이블의 상품 수량을 재조정함.
				pstmt = conn.prepareStatement("select book_count from shop_book where book_id=?");
				pstmt.setInt(1, cart.getBook_id());
				rs = pstmt.executeQuery();
				
			}
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			if(pstmt != null) 
				try {pstmt.close();}catch(SQLException ex) {}
			if(conn != null) 
				try {conn.close();}catch(SQLException ex) {}
		}
	}
}
